#type vertex
#version 450

layout (std140) uniform CameraUniform
{
    mat4 ViewProj;
    vec3 Position;
    vec3 AimDirection;
} u_Camera;

layout (std140) uniform HyperbolaUniform
{
    float XLimit;
    float YLimit;
    float SemiMajorAxis;
    float SemiMinorAxis;
    float DrawThickness;
} u_Hyperbola;

uniform mat4 u_Transform;

layout(location = 0) in vec3 a_Position;

out vec2 v_Position;

void main()
{
    v_Position = vec2(-a_Position.x * u_Hyperbola.XLimit, a_Position.y * u_Hyperbola.YLimit);
    gl_Position = u_Camera.ViewProj * u_Transform * vec4(a_Position, 1.0);
}


#type fragment
#version 450

layout (std140) uniform HyperbolaUniform
{
    float XLimit;
    float YLimit;
    float SemiMajorAxis;
    float SemiMinorAxis;
    float DrawThickness;
} u_Hyperbola;

uniform vec4 u_Color;

in vec2 v_Position;

layout(location = 0) out vec4 o_Color;

bool TestGeneralCase()
{
    float a2 = pow(u_Hyperbola.SemiMajorAxis, 2);
    float b2 = pow(u_Hyperbola.SemiMinorAxis, 2);

    float A = sqrt(a2 * (1.0 + pow(v_Position.y, 2) / b2)) - v_Position.x;
    float B = abs(v_Position.y) - sqrt(b2 * (pow(v_Position.x, 2) / a2 - 1.0));
    float C = sqrt(pow(A,2) + pow(B,2));

    float d = A * B / C;
    
    return d < u_Hyperbola.DrawThickness;
}

bool TestSubSemiMajor()
{
    float a2 = pow(u_Hyperbola.SemiMajorAxis, 2);
    float b2 = pow(u_Hyperbola.SemiMinorAxis, 2);
    float Cy_x = sqrt(a2 * (1.0 + pow(v_Position.y, 2) / b2));

    vec2 n = normalize(vec2(v_Position.y, u_Hyperbola.SemiMajorAxis - Cy_x));
    vec2 Cx = vec2(u_Hyperbola.SemiMajorAxis, 0);

    float d = abs(abs(dot(v_Position, n)) - abs(dot(Cx, n)));

    return d < u_Hyperbola.DrawThickness;
}

void main()
{
    if ((v_Position.x >= u_Hyperbola.SemiMajorAxis
        && TestGeneralCase()) ||
        (v_Position.x < u_Hyperbola.SemiMajorAxis
        && TestSubSemiMajor()))
    {
        o_Color = vec4(u_Color.rgb * u_Color.a, u_Color.a); // Premultiplied alpha
    }
}
