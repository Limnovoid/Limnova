#type vertex
#version 450

layout (std140) uniform CameraUniform
{
    mat4 ViewProj;
    vec3 Position;
    vec3 AimDirection;
} u_Camera;

layout (std140) uniform OrbitUniform
{
    float XOffset;
    float XLimit;
    float YLimit;
    float XEscape;
    float YEscape;
    float SemiMajorAxis;
    float SemiMinorAxis;
    float DrawRadius;
    float XEscapeTangent;
} u_Orbit;

uniform mat4 u_Transform;

layout(location = 0) in vec3 a_Position;

out vec2 v_Position;
out float v_A2;
out float v_B2;

void main()
{
    v_Position = vec2(-a_Position.x * u_Orbit.XLimit, a_Position.y * u_Orbit.YLimit);
    v_A2 = pow(u_Orbit.SemiMajorAxis, 2);
    v_B2 = pow(u_Orbit.SemiMinorAxis, 2);

    gl_Position = u_Camera.ViewProj * u_Transform * vec4(a_Position, 1.0);
}


#type fragment
#version 450

layout (std140) uniform OrbitUniform
{
    float XOffset;
    float XLimit;
    float YLimit;
    float XEscape;
    float YEscape;
    float SemiMajorAxis;
    float SemiMinorAxis;
    float DrawRadius;
    float XEscapeTangent;
} u_Orbit;

uniform vec4 u_Color;

in vec2 v_Position;
in float v_A2;
in float v_B2;

layout(location = 0) out vec4 o_Color;

void TestGeneralCase(out bool success)
{
    float A = sqrt(v_A2 * (1.0 + pow(v_Position.y, 2) / v_B2)) - v_Position.x;
    float B = abs(v_Position.y) - sqrt(v_B2 * (pow(v_Position.x, 2) / v_A2 - 1.0));
    float C = sqrt(pow(A,2) + pow(B,2));

    float d = A * B / C;
    
    success = d < u_Orbit.DrawRadius;
}

void TestSubSemiMajor(out bool success)
{
    float Cy_x = sqrt(v_A2 * (1.0 + pow(v_Position.y, 2) / v_B2));

    vec2 n = normalize(vec2(v_Position.y, u_Orbit.SemiMajorAxis - Cy_x));
    vec2 Cx = vec2(u_Orbit.SemiMajorAxis, 0);

    float d = abs(abs(dot(v_Position, n)) - abs(dot(Cx, n)));

    success = d < u_Orbit.DrawRadius;
}

void main()
{
    vec2 absPositionRelativeEscape = vec2(v_Position.x - u_Orbit.XEscape, abs(v_Position.y) - u_Orbit.YEscape);
    vec2 escapeTangent = vec2(u_Orbit.XEscapeTangent, 1.0);

    bool fragIsInsideLine;
    if (dot(absPositionRelativeEscape, escapeTangent) > 0)
    {
        fragIsInsideLine = false; // No drawing beyond the escape point
    }
    else if (v_Position.x < u_Orbit.SemiMajorAxis)
    {
        TestSubSemiMajor(fragIsInsideLine);
    }
    else
    {
        TestGeneralCase(fragIsInsideLine);
    }

    if (fragIsInsideLine)
    {
        o_Color = vec4(u_Color.rgb * u_Color.a, u_Color.a); // Premultiplied alpha
    }
}
