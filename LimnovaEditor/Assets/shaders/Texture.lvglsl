#type vertex
#version 450

layout (std140) uniform CameraUniform
{
    mat4 ViewProj;
    vec3 Position;
    vec3 AimDirection;
} u_Camera;

layout(location = 0) in vec3 a_Position;
layout(location = 1) in vec4 a_Color;
layout(location = 2) in vec2 a_TexCoord;
layout(location = 3) in vec2 a_TexScale;
layout(location = 4) in float a_TexIndex;

out vec4 v_Color;
out vec2 v_TexCoord;
out vec2 v_TexScale;
out float v_TexIndex;

void main()
{
    v_TexIndex = a_TexIndex;
    v_TexScale = a_TexScale;
    v_TexCoord = a_TexCoord;
    v_Color = a_Color;
    gl_Position = u_Camera.ViewProj * vec4(a_Position, 1.0);
}


#type fragment
#version 450

uniform sampler2D u_Textures[32];

in vec4 v_Color;
in vec2 v_TexCoord;
in vec2 v_TexScale;
in float v_TexIndex;

layout(location = 0) out vec4 o_Color;

void main()
{
    vec4 color = texture(u_Textures[int(v_TexIndex)], v_TexCoord * v_TexScale) * v_Color;

    // NOTE : the u_Textures[] indexing above may not work on AMD cards - see The Cherno's Hazel Engine.
    // Fix for AMD:
    // switch(int(v_TexIndex))
    // {
    // case 0: color = texture(u_Textures[0], v_TexCoord * v_TexScale) * v_Color; break;
    // case 1: color = texture(u_Textures[1], v_TexCoord * v_TexScale) * v_Color; break;
    // ...
    // case 31: color = texture(u_Textures[31], v_TexCoord * v_TexScale) * v_Color; break;
    // }

    color.rgb = color.rgb * color.a; // Premultiplied alpha
    o_Color = color;
}
