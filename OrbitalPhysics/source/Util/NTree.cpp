#include "Util/NTree.h"

#include "Util/Log.h"

namespace Limnova
{

NTree::NTree()
{
}

// ---------------------------------------------------------------------------------------------------------------------------------

NTree::NTree(const NTree& rhs)
{
}

// ---------------------------------------------------------------------------------------------------------------------------------

size_t NTree::Size() const
{
    return m_Nodes.Size();
}

// ---------------------------------------------------------------------------------------------------------------------------------

bool NTree::Has(TNodeId nodeId) const
{
    return m_Nodes.Has(nodeId);
}

// ---------------------------------------------------------------------------------------------------------------------------------

NTree::TNodeId NTree::New()
{
    TNodeId nodeId = GetEmpty();
    if (nodeId == 0) { m_Heights[nodeId] = 0; }
    else { Attach(nodeId, 0); }
    return nodeId;
}

// ---------------------------------------------------------------------------------------------------------------------------------

NTree::TNodeId NTree::New(TNodeId parentId)
{
    LV_ASSERT(Has(parentId), "Invalid parent ID!");

    TNodeId nodeId = GetEmpty();
    Attach(nodeId, parentId);
    return nodeId;
}

// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------------------


}
