#type vertex
#version 450

layout (std140) uniform CameraUniform
{
    mat4 ViewProj;
    vec3 Position;
    vec3 AimDirection;
} u_Camera;

out VertexData {
    flat vec4 Color;
    vec2 TexCoord;
    flat vec2 TexScale;
    flat float TexIndex;
    flat int EntityId;
} outData;


layout(location = 0) in vec3 a_Position;
layout(location = 1) in vec4 a_Color;
layout(location = 2) in vec2 a_TexCoord;
layout(location = 3) in vec2 a_TexScale;
layout(location = 4) in float a_TexIndex;
layout(location = 5) in int a_EntityId;

void main()
{
    outData.Color = a_Color;
    outData.TexCoord = a_TexCoord;
    outData.TexScale = a_TexScale;
    outData.TexIndex = a_TexIndex;
    outData.EntityId = a_EntityId;

    gl_Position = u_Camera.ViewProj * vec4(a_Position, 1.0);
}


#type fragment
#version 450

uniform sampler2D u_Textures[32];

in VertexData {
    flat vec4 Color;
    vec2 TexCoord;
    flat vec2 TexScale;
    flat float TexIndex;
    flat int EntityId;
} inData;

layout(location = 0) out vec4 o_Color;
layout(location = 1) out int o_EntityId;

void main()
{
    vec4 color = texture(u_Textures[int(inData.TexIndex)], inData.TexCoord * inData.TexScale) * inData.Color;

    // NOTE : the u_Textures[] indexing above may not work on AMD cards - see The Cherno's Hazel Engine.
    // Fix for AMD:
    // switch(int(v_TexIndex))
    // {
    // case 0: color = texture(u_Textures[0], v_TexCoord * v_TexScale) * v_Color; break;
    // case 1: color = texture(u_Textures[1], v_TexCoord * v_TexScale) * v_Color; break;
    // ...
    // case 31: color = texture(u_Textures[31], v_TexCoord * v_TexScale) * v_Color; break;
    // }

    color.rgb = color.rgb * color.a; // Premultiplied alpha
    o_Color = color;

    o_EntityId = inData.EntityId;
}
