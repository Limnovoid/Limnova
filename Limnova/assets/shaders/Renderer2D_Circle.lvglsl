// Limnova
// Renderer2D Circle Shader

#type vertex
#version 450

layout (std140, binding = 0) uniform CameraUniform {
    mat4 ViewProj;
    vec3 Position;
    vec3 AimDirection;
} u_Camera;

struct VertexData {
    vec2 PlanarPosition;
    vec4 Color;
    float Thickness;
    float Fade;
};

layout(location = 0) in vec3 a_WorldPosition;
layout(location = 1) in vec2 a_PlanarPosition;
layout(location = 2) in vec4 a_Color;
layout(location = 3) in float a_Thickness;
layout(location = 4) in float a_Fade;

layout (location = 0) out VertexData outData;
layout (location = 4) flat out int v_EntityId;

void main()
{
    outData.PlanarPosition   = a_PlanarPosition;
    outData.Color           = a_Color;
    outData.Thickness       = a_Thickness;
    outData.Fade            = a_Fade;

    gl_Position = u_Camera.ViewProj * vec4(a_WorldPosition, 1.0);
}


#type fragment
#version 450

struct VertexData {
    vec2 PlanarPosition;
    vec4 Color;
    float Thickness;
    float Fade;
};

layout (location = 0) in VertexData inData;
layout (location = 4) flat in int v_EntityId;

layout (location = 0) out vec4 o_Color;
layout (location = 1) out int o_EntityId;

void main()
{
    float distance = 1.0 - length(inData.PlanarPosition);

    if (distance > inData.Thickness + inData.Fade) {
        discard;
    }

    float fade = smoothstep(0.0, inData.Fade, distance);
    fade *= smoothstep(inData.Thickness + inData.Fade, inData.Thickness, distance);

    vec4 color = inData.Color;
    color.a *= fade;
    color.rgb *= color.a; // Premultiplied alpha
    o_Color = color;

    o_EntityId = -1; // TODO
}
