// Limnova
// Renderer2D Orbital Hyperbola Shader

#type vertex
#version 450

layout (std140, binding = 0) uniform CameraUniform {
    mat4 ViewProj;
    vec3 Position;
    vec3 AimDirection;
} u_Camera;

layout(location = 0) in vec3  a_WorldPosition;
layout(location = 1) in vec2  a_PerifocalPos;
layout(location = 2) in vec4  a_Color;
layout(location = 3) in float a_SemiMajorAxis;
layout(location = 4) in float a_SemiMinorAxis;
layout(location = 5) in vec2  a_CutoffPoint;
layout(location = 6) in vec2  a_CutoffNormal;
layout(location = 7) in float a_Thickness;
layout(location = 8) in float a_Fade;
layout(location = 9) in int a_EntityId;

struct VertexData {
    vec2  PerifocalPos;
    vec4  Color;
    float SemiMajor;
    float SemiMinor;
    vec2  CutoffPoint;
    vec2  CutoffNormal;
    float LineRadius;
    float Fade;
};

layout (location = 0) out VertexData outData;
layout (location = 8) flat out int v_EntityId;

void main()
{
    outData.PerifocalPos    = a_PerifocalPos;
    outData.Color           = a_Color;
    outData.SemiMajor       = a_SemiMajorAxis;
    outData.SemiMinor       = a_SemiMinorAxis;
    outData.CutoffPoint     = a_CutoffPoint;
    outData.CutoffNormal    = a_CutoffNormal;
    outData.LineRadius      = a_Thickness / 2.0;
    outData.Fade            = a_Fade;

    v_EntityId = a_EntityId;

    gl_Position = u_Camera.ViewProj * vec4(a_WorldPosition, 1.0);
}


#type fragment
#version 450

struct VertexData {
    vec2  PerifocalPos;
    vec4  Color;
    float SemiMajor;
    float SemiMinor;
    vec2  CutoffPoint;
    vec2  CutoffNormal;
    float LineRadius;
    float Fade;
};

layout (location = 0) in VertexData inData;
layout (location = 8) flat in int v_EntityId;

layout(location = 0) out vec4 o_Color;
layout(location = 1) out int o_EntityId;

void main()
{
    // Discard if pixel position (with absolute y-component) is above the cutoff line
    vec2 pixelCutoff = vec2(inData.PerifocalPos.x - inData.CutoffPoint.x, abs(inData.PerifocalPos.y) - inData.CutoffPoint.y);
    if (dot(pixelCutoff, inData.CutoffNormal) > 0.0) {
        discard;
    }

    float a2 = pow(inData.SemiMajor, 2.0);
    float b2 = pow(inData.SemiMinor, 2.0);

    float k_x = abs(inData.PerifocalPos.x); // NOTE : perifocal position will always be negative in the x-axis (orbit primary and periapsis are left of the center for hyperbolas)
    float k_y = abs(inData.PerifocalPos.y);
    vec2 k = vec2(k_x, k_y);

    float j_x = sqrt(a2 * (k_y * k_y / b2 + 1.0));
    float i_y = sqrt(b2 * (k_x * k_x / a2 - 1.0)); // NOTE : i_y is undefined if k_x is less than the semi-major axis

    float distance;
    if (k_x < inData.SemiMajor)
    {
        vec2 i = vec2(inData.SemiMajor, 0.0);
        vec2 chordNormal = normalize(vec2(-k_y, j_x - inData.SemiMajor));
        distance = dot(k - i, chordNormal);
    }
    else
    {
        // NOTE : subtraction order guarantees that A and B are always the same sign (avoids call to abs())
        float A = j_x - k_x;
        float B = k_y - i_y;
        float C = sqrt(A * A + B * B);
        distance = A * B / C;
    }

    if (distance > inData.LineRadius) {
        discard;
    }


    //float fade = 1.0 - smoothstep(inData.LineRadius - inData.Fade, inData.LineRadius, distance);

    vec4 color = inData.Color;
    //color.a *= fade;
    color.rgb *= color.a; // Premultiplied alpha
    o_Color = color;

    o_EntityId = v_EntityId;
}
